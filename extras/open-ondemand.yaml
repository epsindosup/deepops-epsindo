apiVersion: v1
kind: Namespace
metadata:
  name: open-ondemand
---
apiVersion: v1
kind: Endpoints
metadata:
  name: open-ondemand
  namespace: open-ondemand
subsets:
- addresses:
  - ip: 192.168.16.33
    nodeName: dikti-ec-msvr01
  ports:
  - name: https
    port: 9050
    protocol: TCP
  - name: https2
    port: 9051
    protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: open-ondemand
  namespace: open-ondemand
spec:
  ports:
  - name: https
    port: 9050
    protocol: TCP
    targetPort: 9050
  - name: https2
    port: 9051
    protocol: TCP
    targetPort: 9051
  sessionAffinity: None
  type: NodePort
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: selfsigned
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/configuration-snippet: |
      if ($http_x_forwarded_proto = 'http') {
        return 301 https://$host$request_uri;
      }
    nginx.ingress.kubernetes.io/proxy-body-size: 4096m
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/secure-backends: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  name: open-ondemand
  namespace: open-ondemand
spec:
  rules:
  - host: hpc.ai-dikti.id
    http:
      paths:
      - backend:
          service:
            name: open-ondemand
            port:
              name: https
        path: /
        pathType: ImplementationSpecific
  - host: hpc.dikti.local
    http:
      paths:
      - backend:
          service:
            name: open-ondemand
            port:
              name: https2
        path: /
        pathType: ImplementationSpecific
  tls:
  - hosts:
    - hpc.dikti.local
    - hpc.ai-dikti.id
    secretName: open-ondemand-tls
